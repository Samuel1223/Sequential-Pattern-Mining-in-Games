# -*- coding: utf-8 -*-
"""FINAL_貼標.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VTm3RoL95Q-Of0F5Jb7dDY72hjrEaS42
"""

import pymongo
import pandas as pd
import numpy as np
import datetime
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore') # 加上這行只是把下面的一些加上這行只是把下面的一些warning性質的輸出都省略掉

client = pymongo.MongoClient("mongodb://xxxxxxxxxxxxxxxxxxxxxxxxx")
db = client["xxxxxxxxxx"]


collist = db.list_collection_names()
print(collist)

import sys

from google.colab import drive
drive.mount('/content/drive') # 此處需要登入 google 帳號

!pwd

df_bet_win_percentile = pd.read_csv('/content/drive/MyDrive/專題嘖嘖/gp_bet_win_percentile.csv')
df_bet_win_absolute_percentile = pd.read_csv('/content/drive/MyDrive/專題嘖嘖/TMD_GameInfo_PlayResult_bet_win_absolute_percentile.csv')
df_ActivityRank_Percentile= pd.read_csv('/content/drive/MyDrive/專題嘖嘖/Scoreboard_Score_ActivityRank_Percentile.csv')
df_SummaryTable_total_price_percentile= pd.read_csv('/content/drive/MyDrive/專題嘖嘖/TMD_GoldItem_SummaryTable_total_price_percentile.csv')
df_ChargeGoldItem_money_percentile = pd.read_csv('/content/drive/MyDrive/專題嘖嘖/[NEW]TMD_Platfrom_ChargeGoldItem_money_percentile.csv')
df_item_to_red_value = pd.read_csv('/content/drive/MyDrive/專題嘖嘖/item_to_red_value.csv')
df_FriendGifts_AllLog = pd.read_csv('/content/drive/MyDrive/專題嘖嘖/TMD_FriendGifts_AllLog_give_num.csv')
themeid_to_cate =pd.read_csv('/content/drive/MyDrive/專題嘖嘖/themeid_to_cate.csv') 
money_percentile = pd.read_csv('/content/drive/MyDrive/專題嘖嘖/TMD_GoldItem_SummaryTable_percentile.csv')

themeid_to_cate = themeid_to_cate[['Themeid','en_cate']]
themeid_to_cate.rename(columns = {'Themeid':'themeid'},inplace = True)
themeid_to_cate.set_index('themeid',drop = True,inplace = True)
df_bet_win_percentile.set_index(['leisure','formal1','formal2','others','themeid_cate'],drop = True,inplace = True)
df_bet_win_absolute_percentile = df_bet_win_absolute_percentile.set_index('themeid')
df_ActivityRank_Percentile = df_ActivityRank_Percentile.set_index('activity_id')
df_SummaryTable_total_price_percentile = df_SummaryTable_total_price_percentile.set_index('itemid2')

themeid_to_cate

df_bet_win_percentile

"""# Percentile def"""

def persentile_search(mode, theme_id):

  if mode =='TMD_GameInfo_PlayResult_bet_percentile':
    return1 = df_bet_win_percentile.loc[theme_id]['bet_first_percentile']
    return2 = df_bet_win_percentile.loc[theme_id]['bet_second_percentile']
    return3 = df_bet_win_percentile.loc[theme_id]['bet_third_percentile']
    return return1,return2,return3
    
  elif mode == 'TMD_GameInfo_PlayResult_win_percentile':
    return1 = df_bet_win_percentile.loc[theme_id]['win_first_percentile']
    return2 = df_bet_win_percentile.loc[theme_id]['win_second_percentile']
    return3 = df_bet_win_percentile.loc[theme_id]['win_third_percentile']
    return return1,return2,return3
    
  elif mode =='GameInfo_PlayResult_bet_win_absolute_percentile':
    return1 = df_bet_win_absolute_percentile.loc[theme_id]['first_percentile']
    return2 = df_bet_win_absolute_percentile.loc[theme_id]['second_percentile']
    return3 = df_bet_win_absolute_percentile.loc[theme_id]['third_percentile']
    return return1, return2, return3


  elif mode == 'Scoreboard_Score_ActivityRank_Percentile':
    return1 = df_ActivityRank_Percentile.loc[theme_id]['first_percentile']
    return2 = df_ActivityRank_Percentile.loc[theme_id]['second_percentile']
    return3 = df_ActivityRank_Percentile.loc[theme_id]['third_percentile']
    return return1, return2, return3

  
  elif mode =='GoldItem_SummaryTable_total_price_percentile':
    return1 = df_SummaryTable_total_price_percentile.loc[theme_id]['first_percentile']
    return2 = df_SummaryTable_total_price_percentile.loc[theme_id]['second_percentile']
    return3 = df_SummaryTable_total_price_percentile.loc[theme_id]['third_percentile']
    return return1, return2, return3

def persentile_search1(mode):

  if mode == 'TMD_Platfrom_ChargeGoldItem_money_percentile':
    return1 = df_ChargeGoldItem_money_percentile.loc[0,'first_percentile']
    return2 = df_ChargeGoldItem_money_percentile.loc[0,'second_percentile']
    return3 = df_ChargeGoldItem_money_percentile.loc[0,'third_percentile']
    return4 = df_ChargeGoldItem_money_percentile.loc[0,'forth_percentile']
    return5 = df_ChargeGoldItem_money_percentile.loc[0,'fifth_percentile']
    return6 = df_ChargeGoldItem_money_percentile.loc[0,'sixth_percentile']
    return return1, return2, return3, return4, return5, return6

#win_first_per, win_secound_per, win_third_per, bet_first_per, bet_secound_per, bet_third_per= persentile_search('TMD_GameInfo_PlayResult_bet_win_percentile', 21120401)
#print(win_first_per, win_secound_per, win_third_per, bet_first_per, bet_secound_per, bet_third_per)

first_per, secound_per, third_per = persentile_search('TMD_GameInfo_PlayResult_win_percentile', 21120401)
print(first_per, secound_per, third_per)


first_per, secound_per, third_per = persentile_search('TMD_GameInfo_PlayResult_bet_percentile', 21120401)
print(first_per, secound_per, third_per)


first_per, secound_per, third_per = persentile_search('GameInfo_PlayResult_bet_win_absolute_percentile', 21120401)
print(first_per, secound_per, third_per)

first_per, secound_per, third_per = persentile_search('Scoreboard_Score_ActivityRank_Percentile', 263)
print(first_per, secound_per, third_per)

first_per, secound_per, third_per = persentile_search('GoldItem_SummaryTable_total_price_percentile', 16247)
print(first_per, secound_per, third_per)



"""# Login_log"""

login_df = pd.DataFrame(data=db["login_log"].find({"accountid": 44982134},{'_id':0,'event_code':1,'createtime':1}).sort([("createtime", 1)]))
login_df

login_clean = login_df[['createtime','event_code']]

login_clean.head()

def label_login(value):
    if value == 5:
        value='L0'
        return value
    elif value == 4:
        value='L1'
        return value
    # else:
    #   value = 'Llobby'

login_clean['pattern'] = login_clean['event_code'].apply(label_login) # 這邊可以做一個用英文判別的方式判別的方式像是像是lin, lout, llobby之類的
login_clean.drop(columns=['event_code'],axis=1,inplace=True)
login_clean.columns=["time","pattern"]
login_clean

login_clean = login_clean.dropna(inplace = True)

login_clean

"""# TMD_Platfrom_ChargeGoldItem"""



ChargeGoldItem_df = pd.DataFrame( data = db["TMD_Platfrom_ChargeGoldItem"].find({"accountid": 44982134},{'_id':0,'money':1,'createtime':1}).sort([("createtime", 1)]))
ChargeGoldItem_df

ChargeGoldItem_df_new = ChargeGoldItem_df[["createtime", "money"]]
ChargeGoldItem_df_new

def charge_label(value):
    first_per, secound_per, third_per,forth_per,fifth_per,sixth_per = persentile_search1('TMD_Platfrom_ChargeGoldItem_money_percentile')
#     print(first_per, secound_per, third_per)
    
    if value <= first_per:
        value = 'C1'
    elif first_per<value <= secound_per:
        value = 'C2'
    elif secound_per<value <= third_per:
        value = 'C3'
    elif third_per<value <= forth_per:
        value = 'C4'
    elif forth_per<value <= fifth_per:
        value = 'C5'
    elif fifth_per<value <= sixth_per:
        value = 'C6'
    else:
        value = 'C7'
        
    return value

ChargeGoldItem_df_new["pattern"] = ChargeGoldItem_df_new['money'].apply(charge_label)
ChargeGoldItem_df_new.columns=["time","money","pattern"]
ChargeGoldItem_df_new

pc_clean = ChargeGoldItem_df_new.drop("money",axis=1)

pc_clean



"""# TMD_GameInfo_PlayResult"""

gp_df =pd.DataFrame(data=db["TMD_GameInfo_PlayResult"].find({"accountid": 44982134},{'_id':0,'themeid':1,'bet':1,'win':1,'createtime':1,'roomindex':1}).sort([("createtime", 1)]))
gp_df

if len(gp_df)>0:
    def __get_themeid_and_room_category(themeid,roomindex):
            formal_room,leisure_room,honor_room,prestige_room,other_room =[0 for _ in range(5)]
            if str(themeid)[-1] == '1':
                formal_room = 1
            elif str(themeid)[-1] =='4':
                leisure_room = 1
            else:
                other_room = 1
            if formal_room ==1 and roomindex > 500:
                honor_room = 1
            elif formal_room ==1 and roomindex < 500:
                prestige_room = 1
            category = themeid_to_cate.loc[int(themeid),'en_cate']
            return (leisure_room,honor_room,prestige_room,other_room,category)
    def _get_percentile(themeid,roomindex,bet_or_win):
        """
        判別正式與休閒館方式如下
        請參考TMD_GameInfo_PlayResult.ThemeId欄位，
        尾數1代表正式，尾數4代表休閒，
        正式館又分為富豪級尊榮，
        請參考TMD_GameInfo_PlayResult.RoomIndex欄位，
        房號大於500代表尊榮，小於500代表富豪
        """
        
        if bet_or_win =='bet':
            first_per,second_per,third_per = df_bet_win_percentile.loc[__get_themeid_and_room_category(themeid = themeid,roomindex = roomindex),['bet_first_percentile','bet_second_percentile','bet_third_percentile']]
        elif bet_or_win =='win':
            first_per,second_per,third_per = df_bet_win_percentile.loc[__get_themeid_and_room_category(themeid = themeid,roomindex = roomindex),['win_first_percentile','win_second_percentile','win_third_percentile']]
        return first_per,second_per,third_per
        
    def label_betlevel(df):
        themeid = df['themeid']
        value   =  float(df['bet'])
        roomindex = df['roomindex']
        
        
        bet_first_per, bet_secound_per, bet_third_per= _get_percentile(themeid,roomindex,bet_or_win='bet')
        bet_first_per, bet_secound_per, bet_third_per = list(map(float,[bet_first_per, bet_secound_per, bet_third_per]))
        leisure_room,honor_room,prestige_room,other_room,category = __get_themeid_and_room_category(themeid = themeid,roomindex = roomindex)
        """
        剩下下面需要想一個新標籤，目前想到的是把ARCADE, SLOT 編號成數字，leisure = l, prestige = p ....
        """
        if leisure_room ==1:
            pre_value ='M'
        elif other_room ==1:
            pre_value = 'O'
        elif honor_room ==1:
            pre_value = 'H'
        elif prestige_room ==1:
            pre_value = 'P'
        else:
            raise Exception('wired room')
        category_mapping = {
            'PACHISLOT':1,
            'POKER':2,
            'SLOT':3,
            'CASINO':4,
            'ARCADE':5
            }
        category = str(category_mapping[category])
        
        if value<= bet_first_per:
            value='B1'
        elif value> bet_first_per and value <= bet_secound_per:
            value='B2'
        elif value> bet_secound_per and value <= bet_third_per:
            value='B3'
        else:
            value='B4'
        return pre_value + category + value
    
    def label_winlevel(df):
        themeid = df['themeid']
        value   =  float(df['bet'])
        roomindex = df['roomindex']
        
        
        win_first_per, win_secound_per, win_third_per= _get_percentile(themeid,roomindex,bet_or_win='win')
        win_first_per, win_secound_per, win_third_per = list(map(float,[win_first_per, win_secound_per, win_third_per]))
        leisure_room,honor_room,prestige_room,other_room,category = __get_themeid_and_room_category(themeid = themeid,roomindex = roomindex)
        """
        剩下下面需要想一個新標籤，目前想到的是把ARCADE, SLOT 編號成數字，leisure = l, prestige = p ....
        """
        if leisure_room ==1:
            pre_value ='M'
        elif other_room ==1:
            pre_value = 'O'
        elif honor_room ==1:
            pre_value = 'H'
        elif prestige_room ==1:
            pre_value = 'P'
        else:
            raise Exception('wired room')
        category_mapping = {
            'PACHISLOT':1,
            'POKER':2,
            'SLOT':3,
            'CASINO':4,
            'ARCADE':5
            }
        category = str(category_mapping[category])

        if value<=win_first_per:
            value='W1'
        elif value> win_first_per and value <= win_secound_per:
            value='W2'
        elif value> win_secound_per and value <= win_third_per:
            value='W3'
        else:
            value='W4'
        return pre_value + category + value
    
    gp_b_clean = pd.DataFrame(gp_df.apply(label_betlevel, axis=1))
    gp_b_clean["time"]=gp_df["createtime"]
    gp_w_clean = pd.DataFrame(gp_df.apply(label_winlevel, axis=1))
    gp_w_clean["time"]=gp_df["createtime"]
    gp_clean = pd.concat([gp_b_clean,gp_w_clean])
    gp_clean.columns=["pattern","time"]

gp_clean

"""# TMD_FriendGifts_AllLog"""

FG_df = pd.DataFrame(data=db["TMD_FriendGifts_AllLog"].find({"AccountIdForReceiver": 44982134},{'_id':0,'GiveNum':1,'Commission':1,'CreateTime':1}).sort([("CreateTime", 1)]))
FG_df2 = FG_df.copy()
FG_clean = FG_df[['GiveNum','Commission','CreateTime']]
FG_clean.columns=['GiveNum','Commission','time']
FG_clean

def label_giftlevel(value):
    quantile_list2 = [i for i in df_FriendGifts_AllLog.loc[0,:]]
    if value<=quantile_list2[0]:
        value='G1'
    elif value>quantile_list2[0] and value <=quantile_list2[1]:
        value='G2'
    elif value>quantile_list2[1] and value <=quantile_list2[2]:
        value='G3'
    else:
        value='G4'
    return value

FG_clean['GiveNum'] = FG_clean['GiveNum'].apply(label_giftlevel)
FG_clean['Commission']=FG_clean['Commission'].astype(str)
FG_clean['pattern'] = FG_clean['GiveNum']
FG_clean.drop(columns=['GiveNum',"Commission"],axis=1,inplace=True)
FG_clean

"""# Scoreboard_Score"""

Scoreboard_df =pd.DataFrame(data=db["Scoreboard_Score"].find({"accountid": 44982134},{'_id':0,'endtime':1,'ActivityRank':1,'ActivityId':1}).sort([("createtime", 1)]))
Scoreboard_df.head()

Scoreboard_clean = Scoreboard_df[['endtime','ActivityRank','ActivityId']]
Scoreboard_clean.columns=['time','ActivityRank','ActivityId']
Scoreboard_clean['ActivityId_label'] = 'A'+Scoreboard_clean['ActivityId'].astype(str)
Scoreboard_clean

def label_scoreboard(df):
    Activityid = df['ActivityId']
    value = df['ActivityRank']
    first_per, secound_per, third_per = persentile_search('Scoreboard_Score_ActivityRank_Percentile', Activityid )
    if value<=first_per:
        value='R4'
    elif value>first_per and value <= secound_per:
        value='R3'
    elif value> secound_per and value <= third_per:
        value='R2'
    else:
        value='R1'
    return value

Scoreboard_clean['ranklabel']=Scoreboard_clean.apply(label_scoreboard,axis=1)
Scoreboard_clean

Scoreboard_clean['pattern'] = Scoreboard_clean['ActivityId_label']+Scoreboard_clean['ranklabel']
Scoreboard_clean = Scoreboard_clean[['time','pattern']]
# Scoreboard_clean.columns=["time","pattern"]
Scoreboard_clean



"""# TMD_GoldItem_SummaryTable"""

df = pd.DataFrame(data=db["TMD_GoldItem_SummaryTable"].find({"accountid": 44982134},{'_id':1,'itemid':1,'itemid2':1,'createtime':1,'themeid':1,'amount':1}).sort([("CreateTime", 1)]))
df

#
df['itemid'] = df['itemid'].astype(str)
df['itemid2'] = df['itemid2'].astype(str)
SummaryTable_total_price_percentile= pd.read_csv('/content/gdrive/MyDrive/專題嘖嘖/TMD_GoldItem_SummaryTable_total_price_percentile.csv')#要改位置
SummaryTable_total_price_percentile_groupby = SummaryTable_total_price_percentile.groupby(['itemid','itemid2'])
df_after_groupby = pd.DataFrame(columns = ['pattern','time'])
item_to_redvalue = pd.read_csv('/content/gdrive/MyDrive/專題嘖嘖/item_to_red_value.csv')# 這邊要改位置
def get_percentile(value):
    percentile = money_percentile.loc[0,:].tolist()
    if value <= percentile[0]:
        return 'U1'
    elif percentile[0]<value <=percentile[1]:
        return 'U2'
    elif percentile[1]<value <=percentile[2]:
        return 'U3'
    elif percentile[2] < value:
        return 'U4'
    else:
        raise Exception('wired percentile')
for (itemid,itemid2),table in df.groupby(['itemid','itemid2']):
    cond_itemid = (item_to_redvalue['itemid'] ==int(itemid))
    cond_itemid2 = (item_to_redvalue['itemid2'] ==int(itemid2))
    value = item_to_redvalue[cond_itemid  & cond_itemid2]['redvalue'].values[0]
    
    if value ==0:
        # 這邊如果是redvalue = 0的話代表這應該是免費道具，所以pattern = freegift + _ + amount
        table['value'] = 'U0'
        table['pattern'] =  table['value'].astype(str)+'Q'+ table['amount'].astype(str)
    else:
        # 這邊則是直接用百分位距貼標（可以想一下要不要改）
        table['value'] = int(value)
        table['total_amount'] = table['value'].astype(int) * table['amount'].astype(int)
        table['total_amount'] = table['total_amount'].apply(get_percentile)
        table['pattern'] = table['total_amount'].astype(str)

    df_after_groupby = pd.concat([df_after_groupby,table.loc[:,['pattern','createtime']].rename(columns = {'createtime':'time'})])
df_after_groupby.reset_index(drop = True,inplace = True)

df_after_groupby

"""# TMD_Agent_Quest_TakePrize"""

agt_df = pd.DataFrame(data=db["TMD_Agent_Quest_TakePrize"].find({"accountid":44982134},{'_id':0,'ItemId':1,'ItemId2':1,'ItemAmount':1,'CreateTime':1}).sort([("createtime", 1)]))
agt_df

df_mapping_red = pd.read_csv('/content/gdrive/MyDrive/專題嘖嘖/item_to_red_value.csv')
df_mapping_red.set_index(keys = ["itemid","itemid2"],inplace=True)

df_mapping_red

def fetch_red (df):
  ItemId = df['ItemId']
  ItemId2 = df['ItemId2']
  #print(ItemId, ItemId2)
  return df_mapping_red.loc[ItemId,ItemId2]

agt_per_first_sec,agt_per_third=10,25
def label_agt_level(value):
  
  if 0<value<=agt_per_first_sec:
    return 'T1'
  elif agt_per_first_sec<value<=agt_per_third:
    return 'T2'
  elif agt_per_third<value:
    return 'T3'
  elif value==0:
    return 'T0'
  else:
    raise Exception('wired percentile')

agt_df_clean = agt_df.drop(['ItemId','ItemId2'],axis=1)
agt_df_clean['redvalue']=agt_df.apply(fetch_red, axis = 1) #根據itemid、itemid2mapping結果
agt_df_clean['total']=agt_df_clean['redvalue']*agt_df_clean['ItemAmount'] #相乘得到總紅鑽數
agt_df_clean.drop(['redvalue','ItemAmount'],axis=1,inplace=True)
agt_df_clean['total']=agt_df_clean['total'].apply(label_agt_level)
agt_df_clean.columns=['time','pattern']
agt_df_clean

"""# Final result"""

pd.set_option('display.max_rows', None)

seq_df = pd.concat([login_clean,pc_clean,FG_clean,gp_clean,Scoreboard_clean,agt_df_clean,df_after_groupby])
seq_df.sort_values(by='time',inplace=True)
seq_df.set_index("time",inplace=True)
seq_df.reset_index(drop=True,inplace=True)
seq_df

np.set_printoptions(threshold=sys.maxsize)

final_array = seq_df["pattern"].to_numpy()
final_array

unique_elements, counts_elements = np.unique(final_array, return_counts=True)

for i, j in zip(unique_elements, counts_elements):
  print(i, j)

import pandas as pd 
pd.DataFrame(seq_df["pattern"]).to_csv("/content/gdrive/MyDrive/專題嘖嘖/file.csv")

counts = seq_df['pattern'].value_counts()[:20].plot(kind='pie',autopct='%1.0f%%',figsize=(10,10))
